{
	"info": {
		"_postman_id": "d3752ca3-8282-4149-8040-56e25c9adb7b",
		"name": "Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30032662",
		"_collection_link": "https://blue-moon-870298.postman.co/workspace/Moovsmart~f628cd46-4e9a-4c27-a053-a4ec7ae9061d/collection/30032662-d3752ca3-8282-4149-8040-56e25c9adb7b?action=share&source=collection_link&creator=30032662"
	},
	"item": [
		{
			"name": "Test Cycle 1 - Registration",
			"item": [
				{
					"name": "TestCase_2_InvalidVerificationToken Copy",
					"item": [
						{
							"name": "Verify",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalid_verification_token\", \"aBcDeFgHiJkL\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"token\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Token not found: \" + pm.environment.get(\"invalid_verification_token\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/verify?token={{invalid_verification_token}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"verify"
									],
									"query": [
										{
											"key": "token",
											"value": "{{invalid_verification_token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TestCase_3_MissingUsername Copy",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Username must be between 6 and 15 characters long\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TestCase_4_ExcessDataInRequestBody Copy",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 2,\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\",\r\n    \"roles\": [\r\n        \"ROLE_GENERAL\"\r\n    ],\r\n    \"active\": true,\r\n    \"whatever\": \"whatever\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Test Cycle 2 - Login",
			"item": [
				{
					"name": "Test Case 1 - Valid Login Details",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Received access token and is of type string\", function () {   \r",
											"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
											"    pm.expect(typeof jsonData.accessToken).to.eql(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Received refresh token and is of type string\", function () {   \r",
											"    pm.expect(jsonData).to.have.property(\"refreshToken\");\r",
											"    pm.expect(typeof jsonData.refreshToken).to.eql(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Valid username in app user details\", function () {   \r",
											"    pm.expect(jsonData.appUserDetails).to.have.property(\"username\");\r",
											"    pm.expect(typeof jsonData.appUserDetails.username).to.eql(\"string\");\r",
											"    pm.expect(jsonData.appUserDetails.username).to.eql(pm.environment.get(\"username\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"username\", \"madorjan\");\r",
											"pm.environment.set(\"password\", \"Asdf1234\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 2 - Missing Username",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=missing\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 3 - Missing Password",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=missing\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"username\", \"madorjan\");\r",
											"pm.environment.set(\"password\", \"Asdf1234\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 4 - Empty Username",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=empty\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 5 - Empty Password",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=empty\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"username\", \"madorjan\");\r",
											"pm.environment.set(\"password\", \"Asdf1234\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 6 - Invalid Username",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=invalid\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"invalid_username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{invalid_username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 7 - Invalid Password",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=invalid\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"invalid_password\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{invalid_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TestCase 8 - Excess Data in Request Body",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=invalid\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\",\r\n    \"id\" : 23,\r\n    \"accessToken\" : false,\r\n    \"whatever\" : \"whatever\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Test Cycle 3 - Profile",
			"item": [
				{
					"name": "Test Case 1 - Accessing Profile",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"username\", \"madorjan\");\r",
											"pm.environment.set(\"password\", \"Asdf1234\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Test Cycle 4 - Logout",
			"item": [
				{
					"name": "Test Case 1  - Logout After Login",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.id=100\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.id=100\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.id=100\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/profile/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.id=100\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	]
}