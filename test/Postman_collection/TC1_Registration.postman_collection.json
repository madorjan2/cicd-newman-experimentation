{
	"info": {
		"_postman_id": "66ebc81a-819c-407d-8e34-15d1a39d6a96",
		"name": "Test Cycle 1 - Registration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30032662",
		"_collection_link": "https://blue-moon-870298.postman.co/workspace/Moovsmart~f628cd46-4e9a-4c27-a053-a4ec7ae9061d/collection/30032662-66ebc81a-819c-407d-8e34-15d1a39d6a96?action=share&source=collection_link&creator=30032662"
	},
	"item": [
		{
			"name": "TestCase_2_InvalidVerificationToken",
			"item": [
				{
					"name": "Verify",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_verification_token\", \"aBcDeFgHiJkL\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Received correct error message\", function () {\r",
									"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
									"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
									"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
									"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
									"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
									"    pm.expect(jsonData[0].field).to.eql(\"token\");\r",
									"    pm.expect(jsonData[0].errorMessage).to.eql(\"Token not found: \" + pm.environment.get(\"invalid_verification_token\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/verify?token={{invalid_verification_token}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"verify"
							],
							"query": [
								{
									"key": "token",
									"value": "{{invalid_verification_token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TestCase_3_MissingUsername",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Received correct error message\", function () {\r",
									"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
									"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
									"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
									"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
									"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
									"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
									"    pm.expect(jsonData[0].errorMessage).to.eql(\"Username must be between 6 and 15 characters long\");\r",
									"});\r",
									"\r",
									"pm.test(\"REMOVE THIS LATER\", function () {\r",
									"    pm.expect(jsonData).to.have.lengthOf(1000);    \r",
									"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
									"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
									"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
									"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
									"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
									"    pm.expect(jsonData[0].errorMessage).to.eql(\"Username must be between 6 and 15 characters long\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/registration",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"registration"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TestCase_4_ExcessDataInRequestBody",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 6;\r",
									"    }\r",
									"    if (!maxValue) {\r",
									"        maxValue = 15;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue)\r",
									"    let randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"username\", randomString(6, 15));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 2,\r\n    \"username\" : {{username}},\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\",\r\n    \"roles\": [\r\n        \"ROLE_GENERAL\"\r\n    ],\r\n    \"active\": true,\r\n    \"whatever\": \"whatever\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/registration",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"registration"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}