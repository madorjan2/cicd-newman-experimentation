{
	"info": {
		"_postman_id": "d3752ca3-8282-4149-8040-56e25c9adb7b",
		"name": "Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30032662",
		"_collection_link": "https://blue-moon-870298.postman.co/workspace/Moovsmart~f628cd46-4e9a-4c27-a053-a4ec7ae9061d/collection/30032662-d3752ca3-8282-4149-8040-56e25c9adb7b?action=share&source=collection_link&creator=30032662"
	},
	"item": [
		{
			"name": "Test Cycle 1 - Registration",
			"item": [
				{
					"name": "Test Case 02 - Invalid Verification Token",
					"item": [
						{
							"name": "Verify",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalid_verification_token\", \"aBcDeFgHiJkL\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=token\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"token\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Token not found: \" + pm.environment.get(\"invalid_verification_token\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/verify?token={{invalid_verification_token}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"verify"
									],
									"query": [
										{
											"key": "token",
											"value": "{{invalid_verification_token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 03 - Missing Username",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Username must be between 6 and 15 characters long\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 04 - Excess Data In Request Body",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 2,\r\n    \"username\" : {{username}},\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\",\r\n    \"roles\": [\r\n        \"ROLE_GENERAL\"\r\n    ],\r\n    \"active\": true,\r\n    \"whatever\": \"whatever\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 05 - Empty Username",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Username must be between 6 and 15 characters long\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 06 - Empty Password",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"password\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Password must contains lower and uppercase characters, numbers and must be at least 8 characters long.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 07 - Empty Email",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"// TODO error message változhat\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"email\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"must not be blank\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 08 - Empty First Name",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"firstName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Must not be blank.\");\r",
											"});\r",
											"// TODO error message-t átírni a korrektre majd\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 09 - Empty Last Name",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"lastName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Must not be blank.\");\r",
											"});\r",
											"// TODO error message-t átírni a korrektre majd\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 10 - Empty Phone Number",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"phoneNumber\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Wrong phone number format!\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 11 - Empty Usage Type",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 12 - Too Short Username",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Username must be between 6 and 15 characters long\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 3;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 5;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(3, 5));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 13 - Too Long Username",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Username must be between 6 and 15 characters long\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 16;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 17;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(16, 17));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 14 - Spec Char in Username",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Username can not contain special characters\");\r",
											"});\r",
											"// TODO átírni korrekt error message-re\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"// TODO status code-ot is majd ellenőrizni"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = '@$#&*{}[],=-().+;/') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 15 - Only Whitespace Username",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Username can not contain whitespaces.\");\r",
											"});\r",
											"// TODO error message-et majd ellenőrizni\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"      \",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 16 - Whitespace in Username",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Username can not contain whitespaces.\");\r",
											"});\r",
											"// TODO error message-et majd ellenőrizni\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(4, 4) + ' ' + randomString(1, 10))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 17 - Non-ascii Username",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Username can not contain non-ascii characters nor emojis.\");\r",
											"});\r",
											"// TODO error message-et majd ellenőrizni\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = '😀🌍🎉👋éàöñこんにちは©®€£µ¥') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 18 - Non-ascii Password",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"password\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Password can not contain non-ascii characters nor emojis.\");\r",
											"});\r",
											"// TODO error message-et majd ellenőrizni\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15))\r",
											"pm.environment.set(\"password\", randomString(5, 12, dataSet = '😀🌍🎉👋éàöñこんにちは©®€£µ¥')+\"Aa1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 19 - Too Short Password",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"password\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Password must contains lower and uppercase characters, numbers and must be at least 8 characters long.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"asd123\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 20 - Too Long Password",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"password\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Password must contains lower and uppercase characters, numbers and must be between 8 to 255 characters.\");\r",
											"});\r",
											"// TODO korrekt error message\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"password\", randomString(256, 257)+\"Aa1\");\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 21 - No Lowercase Password",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"password\", randomString(8, 10, dataSet='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"password\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Password must contains lower and uppercase characters, numbers and must be at least 8 characters long.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 22 - No Uppercase Password",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"password\", randomString(8, 10, dataSet='abcdefghijklmnopqrstuvwxyz0123456789'));\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"password\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Password must contains lower and uppercase characters, numbers and must be at least 8 characters long.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 23 - Invalid Email",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set(\"email\", randomString(5,8) + \"@\" + randomString(4,6) + \".c\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"email\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Please provide a valid email address.\");\r",
											"});\r",
											"// TODO korrekt error message\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 24 - Too Long First Name",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set(\"firstName\", randomString(256, 257, dataSet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\r",
											"// Érdekes, mert itt 255, 256 még működik, szóval tényleg a var 255-ig van használva. Innentől csak 500-as error."
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"firstName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"First name cannot be longer than ... .\");\r",
											"});\r",
											"// TODO korrekt error message\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 25 - Only Whitespace First Name",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"firstName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"First name cannot contain whitespaces.\");\r",
											"});\r",
											"// TODO korrekt error message\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"      \",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 26 - Too Long Last Name",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set(\"lastName\", randomString(256, 257, dataSet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\r",
											"// Érdekes, mert itt 255, 256 még működik, szóval tényleg a var 255-ig van használva. Innentől csak 500-as error."
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"lastName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Last name cannot be longer than ... .\");\r",
											"});\r",
											"// TODO korrekt error message\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 27 - Only Whitespace Last Name",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"lastName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Last name cannot contain whitespaces.\");\r",
											"});\r",
											"// TODO korrekt error message\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"      \",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 28 - Too Short Phone Number",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"phoneNumber\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Wrong phone number format!\");\r",
											"});\r",
											"// TODO korrekt error message\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+363036303\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 29 - Too Long Phone Number",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"phoneNumber\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Wrong phone number format!\");\r",
											"});\r",
											"// TODO korrekt error message\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+363036303123\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 30 - No Country Code in Phone Number",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"password\", randomString(8, 10));\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"phoneNumber\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Wrong phone number format!\");\r",
											"});\r",
											"// TODO korrekt error message\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"06303630312\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 31 - Non-numerical Phone Number",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"phoneNumber\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Wrong phone number format!\");\r",
											"});\r",
											"// TODO korrekt error message\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"0630a-36*3-03A12\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 32 - Existing Username",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=CRITICAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Username already exists: \" + pm.environment.get('baseline_username'));\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 33 - Existing Email",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=CRITICAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"email\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Email already exists: \" + pm.environment.get('baseline_email'));\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{$randomUserName}}\",\r\n    \"email\": \"{{baseline_email}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 34 - Existing Phone Number",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"{{baseline_phone_number}}\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 35 - Request Without Username",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Your did not fill in your username.\");\r",
											"});\r",
											"//TODO korrekt error message\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36309998888\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 36 - Request Without Phone Number",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"phoneNumber\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"You did not type in your phone number.\");\r",
											"});\r",
											"//TODO korrekt error messages and status code.\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 37 - Request Without First Name",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"firstName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Please write in your first name.\");\r",
											"});\r",
											"//TODO korrekt error messages and status code.\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36309998888\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 38 - Request Without Last Name",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"lastName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Please write in your last name.\");\r",
											"});\r",
											"//TODO korrekt error messages and status code.\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"phoneNumber\": \"+36309998888\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 39 - Request Without Password",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"password\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Please write in your password.\");\r",
											"});\r",
											"//TODO korrekt error messages and status code.\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36309998888\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 40 - Request Without Email Address",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"email\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Please write in your email, it must not be empty.\");\r",
											"});\r",
											"//TODO korrekt error messages\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36309998888\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 41 - Request Without Usage Type",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"usageType\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Please write your usage type.\");\r",
											"});\r",
											"//TODO korrekt error messages\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"Asdf1234\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36309998888\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 43 - No Numbers in Password",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 256;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 257;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"password\", randomString(8, 10, dataSet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=registration\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"password\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Password must contains lower and uppercase characters, numbers and must be at least 8 characters long.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Test Cycle 2 - Login",
			"item": [
				{
					"name": "Test Case 01 - Valid Login Details",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Received access token and is of type string\", function () {   \r",
											"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
											"    pm.expect(typeof jsonData.accessToken).to.eql(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Received refresh token and is of type string\", function () {   \r",
											"    pm.expect(jsonData).to.have.property(\"refreshToken\");\r",
											"    pm.expect(typeof jsonData.refreshToken).to.eql(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Valid username in app user details\", function () {   \r",
											"    pm.expect(jsonData.appUserDetails).to.have.property(\"username\");\r",
											"    pm.expect(typeof jsonData.appUserDetails.username).to.eql(\"string\");\r",
											"    pm.expect(jsonData.appUserDetails.username).to.eql(pm.environment.get(\"username\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"username\", \"madorjan\");\r",
											"pm.environment.set(\"password\", \"Asdf1234\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 02 - Missing Username",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=missing\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 03 - Missing Password",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=missing\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"username\", \"madorjan\");\r",
											"pm.environment.set(\"password\", \"Asdf1234\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 04 - Empty Username",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=empty\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 05 - Empty Password",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=empty\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"username\", \"madorjan\");\r",
											"pm.environment.set(\"password\", \"Asdf1234\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 06 - Invalid Username",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=invalid\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"invalid_username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{invalid_username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 07 - Invalid Password",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=invalid\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"invalid_password\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{invalid_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 08 - Excess Data in Request Body",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=login\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.tag=invalid\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\",\r\n    \"id\" : 23,\r\n    \"accessToken\" : false,\r\n    \"whatever\" : \"whatever\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Test Cycle 3 - Profile",
			"item": [
				{
					"name": "Test Case 01 - Accessing Profile",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 02 - Deleting Profile",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/profile/delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);\r",
											"    pm.expect(jsonData[0]).to.have.property(\"error_message\");\r",
											"    pm.expect(typeof jsonData.error_message).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].error_message).to.eql(\"The bearer token is invalid.\");\r",
											"});\r",
											"\r",
											"//TODO: error_message to errorMessage, also errormessage text\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 03 - Changing Username",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"username\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Username cannot be modified\");\r",
											"});\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 04 - Changing First Name",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"first_name\", jsonData.firstName);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"First name changed\", function () {\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.firstName).to.not.be.eql(pm.environment.get(\"first_name\"))\r",
											"});\r",
											"\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 05 - Changing Last Name",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"last_name\", jsonData.lastName);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Last name changed\", function () {\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.lastName).to.not.be.eql(pm.environment.get(\"last_name\"))\r",
											"});\r",
											"\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastName\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 06 - Changing Phone Number",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"phone_number\", jsonData.phoneNumber);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Phone number changed\", function () {\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.phoneNumber).to.not.be.eql(pm.environment.get(\"phone_number\"))\r",
											"});\r",
											"\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phoneNumber\": \"+36707070707\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 07 - Changing Multiple Fields",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"last_name\", jsonData.lastName);\r",
											"pm.environment.set(\"phone_number\", jsonData.phoneNumber);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"All data changed\", function () {\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.lastName).to.not.be.eql(pm.environment.get(\"last_name\"))\r",
											"    pm.expect(jsonData.phoneNumber).to.not.be.eql(pm.environment.get(\"phone_number\"))\r",
											"});\r",
											"\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastName\": {{$randomLastName}},\r\n    \"phoneNumber\": \"+36707070707\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 08 - Changing Email",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"email\", jsonData.email);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200 && jsonData.message == \"Your email address has been changed.\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('new_email', 'madorjan@gmail.com')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{new_email}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/change-email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"change-email"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Email changed\", function () {\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.email).to.not.be.eql(pm.environment.get(\"email\"))\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 09 - Changing Password Logged In",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct message displayed\", function () {  \r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(typeof jsonData.message).to.eql(\"string\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Your password has been changed.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200 && jsonData.message == \"Your password has been changed.\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('new_password', 'Asdfg12345');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{new_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Old Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With New Passord",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{new_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 10 - Changing Password Logged Out",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct message displayed\", function () {  \r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"    pm.expect(typeof jsonData.message).to.eql(\"string\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Your password has been changed.\");\r",
											"});\r",
											"\r",
											"//TODO kabe az egesz, nincs implementalva....\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200 && jsonData.message == \"Your password has been changed.\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('new_password', 'Asdfg12345');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{new_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Old Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With New Passord",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{new_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 11 - Changing Password To Too Short",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct message displayed\", function () {  \r",
											"    pm.expect(jsonData).to.have.property(\"error_message\");\r",
											"    pm.expect(typeof jsonData.message).to.eql(\"string\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Password must be 8 characters etc.\");\r",
											"});\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200 && jsonData.error_message == \"Password must be 8 characters etc.\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('new_password', 'As1');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{new_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Old Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 12 - Changing Password To Too Long",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct message displayed\", function () {  \r",
											"    pm.expect(jsonData).to.have.property(\"error_message\");\r",
											"    pm.expect(typeof jsonData.message).to.eql(\"string\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Password must be 8 characters etc.\");\r",
											"});\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200 && jsonData.error_message == \"Password must be 8 characters etc.\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set('new_password', randomString(257, 257) + 'As1');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{new_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Old Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 13 - Changing Password Without Numbers",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct message displayed\", function () {  \r",
											"    pm.expect(jsonData).to.have.property(\"error_message\");\r",
											"    pm.expect(typeof jsonData.message).to.eql(\"string\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Password must be 8 characters etc.\");\r",
											"});\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200 && jsonData.error_message == \"Password must be 8 characters etc.\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set('new_password', randomString(8, 14) + 'Aa');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{new_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Old Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 14 - Changing Password Without Lowercase",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct message displayed\", function () {  \r",
											"    pm.expect(jsonData).to.have.property(\"error_message\");\r",
											"    pm.expect(typeof jsonData.message).to.eql(\"string\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Password must be 8 characters etc.\");\r",
											"});\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200 && jsonData.error_message == \"Password must be 8 characters etc.\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set('new_password', randomString(8, 14) + 'A1');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{new_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Old Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 15 - Changing Password Without Uppercase",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct message displayed\", function () {  \r",
											"    pm.expect(jsonData).to.have.property(\"error_message\");\r",
											"    pm.expect(typeof jsonData.message).to.eql(\"string\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Password must be 8 characters etc.\");\r",
											"});\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200 && jsonData.error_message == \"Password must be 8 characters etc.\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set('new_password', randomString(8, 14) + 'a1');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{new_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Old Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 16 - Changing Email To Invalid Format",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"email\", jsonData.email);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"email\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Invalid email format\");\r",
											"});\r",
											"// TODO Error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('new_email', 'madorjan@gmail.c')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{new_email}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/change-email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"change-email"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 17 - Changing First Name To Too Long",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"first_name\", jsonData.firstName);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"first_name\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Invalid email format\");\r",
											"});\r",
											"// TODO Error message\r",
											"\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"first_name\", randomString(257, 257, dataSet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{first_name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 18 - Changing First Name To Whitespaces",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"first_name\", jsonData.firstName);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"first_name\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Invalid email format\");\r",
											"});\r",
											"// TODO Error message\r",
											"\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"first_name\", \"        \");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{first_name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 19 - Changing Last Name To Too Long",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"first_name\", jsonData.firstName);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"last_name\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Invalid email format\");\r",
											"});\r",
											"// TODO Error message\r",
											"\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"last_name\", randomString(257, 257, dataSet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastName\": \"{{last_name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 20 - Changing Last Name To Whitespaces",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"first_name\", jsonData.firstName);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"last_name\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Invalid email format\");\r",
											"});\r",
											"// TODO Error message\r",
											"\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"last_name\", \"        \");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastName\": \"{{last_name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 21 - Changing Phone Number To Too Short",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"phone_number\", jsonData.phoneNumber);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"last_name\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Invalid email format\");\r",
											"});\r",
											"// TODO Error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phoneNumber\": \"+367\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 22 - Changing Phone Number To Too Long",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"phone_number\", jsonData.phoneNumber);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"last_name\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Invalid email format\");\r",
											"});\r",
											"// TODO Error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phoneNumber\": \"+367010101010101010\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 23 - Changing Phone Number With No Country Code",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"phone_number\", jsonData.phoneNumber);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"last_name\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Invalid email format\");\r",
											"});\r",
											"// TODO Error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phoneNumber\": \"06703030303\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 24 - Changing Phone Number With Special Characters",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"phone_number\", jsonData.phoneNumber);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"last_name\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Invalid email format\");\r",
											"});\r",
											"// TODO Error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phoneNumber\": \"0670*0!0303\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 25 - Changing First Name To No Value",
					"item": [
						{
							"name": "Dev Reg",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
											"    if (!minValue) {\r",
											"        minValue = 6;\r",
											"    }\r",
											"    if (!maxValue) {\r",
											"        maxValue = 15;\r",
											"    }\r",
											"\r",
											"    let length = _.random(minValue, maxValue)\r",
											"    let randomString = \"\";\r",
											"\r",
											"    for (let i = 0; i < length; i++)\r",
											"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"username\", randomString(6, 15));\r",
											"pm.environment.set('password', 'Asdf1234');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"first_name\", jsonData.firstName);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 201);\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"+36303630363\",\r\n    \"usageType\": \"BUSINESS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/registration/developer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"registration",
										"developer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=profile\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"first_name\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Missing value\");\r",
											"});\r",
											"// TODO Error message\r",
											"\r",
											"//TODO: error message\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"update"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Test Cycle 4 - Logout",
			"item": [
				{
					"name": "Test Case 01  - Logout After Login",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/profile/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=logout\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=Critical\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Test Cycle 5 - Search and List Ads",
			"item": [
				{
					"name": "Test Case 1 - All Available Ads as User",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "All Available Ads as User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=list\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.test(\"Response body is array.\", function () {    \r",
											"    pm.expect(jsonData).to.have.length.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"No inactive ads are shown.\", function () {\r",
											"    for (let responseDict of jsonData){\r",
											"        pm.expect(responseDict.active).to.be.true;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/advertisement",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										"advertisement"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 2 - All Available Ads as Visitor",
					"item": [
						{
							"name": "All Available Ads as Visitor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=list\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.test(\"Response body is array.\", function () {    \r",
											"    pm.expect(jsonData).to.have.length.above(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/advertisement",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										"advertisement"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 3 - Pagination of All Ads",
					"item": [
						{
							"name": "Pagination",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"page_size\", 7)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=list\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Number of ads listed are of the expected value\", function (){\r",
											"    pm.expect(jsonData).to.have.lengthOf(pm.environment.get(\"page_size\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/advertisement?pageNo=0&pageSize={{page_size}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										"advertisement"
									],
									"query": [
										{
											"key": "pageNo",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "{{page_size}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 4 - All Ads by User",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Active Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 201)\r",
											"});\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"active_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"Budapest, Madi utca 5\",\r\n    \"price\": 1111100000,\r\n    \"floorArea\": 115.0,\r\n    \"rooms\": 7.5,\r\n    \"builtYear\": 1988,\r\n    \"floor\": 16,\r\n    \"elevator\": false,\r\n    \"balcony\": true,\r\n    \"plot\": 125.0,\r\n    \"description\": \"iszonyat meno\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"CONCRETE\",\r\n    \"advertiseType\": \"FOR_RENT\",\r\n    \"buildingCondition\": \"NEW\",\r\n    \"propertyType\": \"FLAT\",\r\n    \"heating\": \"GEOTHERMAL\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "False Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 201)\r",
											"});\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"inactive_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"Budapest, Madi utca 5\",\r\n    \"price\": 55500000,\r\n    \"floorArea\": 105.0,\r\n    \"rooms\": 5.5,\r\n    \"builtYear\": 1988,\r\n    \"floor\": 12,\r\n    \"elevator\": false,\r\n    \"balcony\": true,\r\n    \"plot\": 125.0,\r\n    \"description\": \"iszonyat meno\",\r\n    \"active\": false,\r\n    \"buildingMaterialType\": \"CONCRETE\",\r\n    \"advertiseType\": \"FOR_RENT\",\r\n    \"buildingCondition\": \"NEW\",\r\n    \"propertyType\": \"FLAT\",\r\n    \"heating\": \"GEOTHERMAL\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "All Ads by User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=list\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.test(\"Response body is array.\", function () {    \r",
											"    pm.expect(jsonData).to.have.length.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Both active and inactive ads are shown.\", function () {\r",
											"    let saw_active = false\r",
											"    let saw_inactive = false\r",
											"    for (let responseDict of jsonData){\r",
											"        if (responseDict.active){\r",
											"            saw_active = true\r",
											"        }\r",
											"        else {\r",
											"            saw_inactive = true\r",
											"        }\r",
											"    }\r",
											"    pm.expect(saw_active && saw_inactive).to.be.true\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/advertisement",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"advertisement"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Active delete",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{active_id}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						},
						{
							"name": "False delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{inactive_id}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 5 - All Ads by Another User",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "All Ads by Another User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"userid\", pm.environment.get(\"baseline_id\")-1)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=list\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=CRITICAL\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);   \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"\");\r",
											"\r",
											"});\r",
											"//TODO set error message\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/advertisement",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"advertisement"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 6 - View a Certain Ad",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 201)\r",
											"});\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"adid\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"Budapest, Madi utca 5\",\r\n    \"price\": 1111100000,\r\n    \"floorArea\": 115.0,\r\n    \"rooms\": 7.5,\r\n    \"builtYear\": 1988,\r\n    \"floor\": 16,\r\n    \"elevator\": false,\r\n    \"balcony\": true,\r\n    \"plot\": 125.0,\r\n    \"description\": \"iszonyat meno\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"CONCRETE\",\r\n    \"advertiseType\": \"FOR_RENT\",\r\n    \"buildingCondition\": \"NEW\",\r\n    \"propertyType\": \"FLAT\",\r\n    \"heating\": \"GEOTHERMAL\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "View a certain ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=list\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}"
										},
										{
											"key": "adId",
											"value": "{{adid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "New ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 7 - View a Certain Ad as Visitor",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 201)\r",
											"});\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"adid\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"Budapest, Madi utca 5\",\r\n    \"price\": 1111100000,\r\n    \"floorArea\": 115.0,\r\n    \"rooms\": 7.5,\r\n    \"builtYear\": 1988,\r\n    \"floor\": 16,\r\n    \"elevator\": false,\r\n    \"balcony\": true,\r\n    \"plot\": 125.0,\r\n    \"description\": \"iszonyat meno\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"CONCRETE\",\r\n    \"advertiseType\": \"FOR_RENT\",\r\n    \"buildingCondition\": \"NEW\",\r\n    \"propertyType\": \"FLAT\",\r\n    \"heating\": \"GEOTHERMAL\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "View a certain ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=list\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}"
										},
										{
											"key": "adId",
											"value": "{{adid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "New ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 8 - View a Non-existing Ad",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 201)\r",
											"});\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"adid\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"Budapest, Madi utca 5\",\r\n    \"price\": 1111100000,\r\n    \"floorArea\": 115.0,\r\n    \"rooms\": 7.5,\r\n    \"builtYear\": 1988,\r\n    \"floor\": 16,\r\n    \"elevator\": false,\r\n    \"balcony\": true,\r\n    \"plot\": 125.0,\r\n    \"description\": \"iszonyat meno\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"CONCRETE\",\r\n    \"advertiseType\": \"FOR_RENT\",\r\n    \"buildingCondition\": \"NEW\",\r\n    \"propertyType\": \"FLAT\",\r\n    \"heating\": \"GEOTHERMAL\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "New ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						},
						{
							"name": "View a certain ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=list\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=NORMAL\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}"
										},
										{
											"key": "adId",
											"value": "{{adid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 9 - View another user's inactive Ad",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New inactive ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 201)\r",
											"});\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"adid\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"Budapest, Madi utca 5\",\r\n    \"price\": 1111100000,\r\n    \"floorArea\": 115.0,\r\n    \"rooms\": 7.5,\r\n    \"builtYear\": 1988,\r\n    \"floor\": 16,\r\n    \"elevator\": false,\r\n    \"balcony\": true,\r\n    \"plot\": 125.0,\r\n    \"description\": \"iszonyat meno\",\r\n    \"active\": false,\r\n    \"buildingMaterialType\": \"CONCRETE\",\r\n    \"advertiseType\": \"FOR_RENT\",\r\n    \"buildingCondition\": \"NEW\",\r\n    \"propertyType\": \"FLAT\",\r\n    \"heating\": \"GEOTHERMAL\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "2nd user login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"access_token_2\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token_2\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username_2}}\",\r\n    \"password\" : \"{{baseline_password_2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "View a certain ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=list\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=CRITICAL\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}"
										},
										{
											"key": "adId",
											"value": "{{adid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "New ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 10 - Search Function Sanity Test",
					"item": [
						{
							"name": "All Ads",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"number_of_ads\", jsonData.length)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/advertisement",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										"advertisement"
									]
								},
								"description": "Returns all ads. Does not support pagination."
							},
							"response": []
						},
						{
							"name": "Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=list\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"All ads are shown without filters.\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(pm.environment.get(\"number_of_ads\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/adsListBySearch?address=&minPrice=&maxPrice=&floorArea=&rooms=&builtYear=&floor=&elevator=&balcony=&plot=&active=true&advertiseType=&buildingMaterialType=&buildingCondition=&propertyType=&heating=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										"adsListBySearch"
									],
									"query": [
										{
											"key": "address",
											"value": "",
											"description": "Search Criteria for address"
										},
										{
											"key": "minPrice",
											"value": "",
											"description": "Search Criteria for minimum price"
										},
										{
											"key": "maxPrice",
											"value": "",
											"description": "Search Criteria for maximum price"
										},
										{
											"key": "floorArea",
											"value": "",
											"description": "Search Criteria for floor area (no min/max???)"
										},
										{
											"key": "rooms",
											"value": "",
											"description": "Search Criteria for rooms (no min/max???)"
										},
										{
											"key": "builtYear",
											"value": "",
											"description": "Search Criteria for year of construction (no min/max???)"
										},
										{
											"key": "floor",
											"value": "",
											"description": "Search Criteria for floor (no min/max???)"
										},
										{
											"key": "elevator",
											"value": "",
											"description": "Search Criteria for elevator"
										},
										{
											"key": "balcony",
											"value": "",
											"description": "Search Criteria for balcony"
										},
										{
											"key": "plot",
											"value": "",
											"description": "Search Criteria for plot area (no min/max???)"
										},
										{
											"key": "active",
											"value": "true",
											"description": "Search Criteria for the ad to be active (??? shouldn't this always be true?)"
										},
										{
											"key": "advertiseType",
											"value": "",
											"description": "Search Criteria for advertiseType"
										},
										{
											"key": "buildingMaterialType",
											"value": ""
										},
										{
											"key": "buildingCondition",
											"value": ""
										},
										{
											"key": "propertyType",
											"value": "",
											"description": "Search Criteria for property type"
										},
										{
											"key": "heating",
											"value": "",
											"description": "Search Criteria for heating"
										},
										{
											"key": "pageNo",
											"value": "0",
											"description": "The page of the pagination",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "10",
											"description": "The number of items per page in pagination",
											"disabled": true
										}
									]
								},
								"description": "Searches the ads with the given parameters.\n\nProvides pagination options."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Test Cycle 6 - Posting Ads",
			"item": [
				{
					"name": "Test Case 1 - Posting an Ad",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 2 - Missing Required Data (API)",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"address\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Cannot have missing address\");\r",
											"});\r",
											"\r",
											"//TODO correct error message"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 3 - Empty Required Data",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"address\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Cannot have empty address\");\r",
											"});\r",
											"\r",
											"//TODO correct error message"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 4 - Invalid Input Data Type",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"price\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Price must be integer\");\r",
											"});\r",
											"\r",
											"//TODO correct error message"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": \"ez_egy_szoveg\",\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 5 - Int Instead of Float",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.test('Response contains all required fields', function (){\r",
											"    pm.expect(jsonData.id).to.exist();\r",
											"    pm.environment.set('adid', jsonData.id);\r",
											"    pm.expect(jsonData.address).to.be.eql(pm.environment.get(\"baseline_address\"));\r",
											"    pm.expect(jsonData.price).to.be.eql(pm.environment.get('baseline_price'));\r",
											"    pm.expect(typeof jsonData.floorArea).to.be.eql('number');\r",
											"    pm.expect(jsonData.floorArea).to.be.eql(pm.environment.get(10.0));\r",
											"    pm.expect(jsonData.rooms).to.be.eql(pm.environment.get('baseline_rooms'));\r",
											"    pm.expect(jsonData.builtYear).to.be.eql(pm.environment.get('baseline_built_year'));\r",
											"    pm.expect(jsonData.floor).to.be.eql(pm.environment.get('baseline_floor'));\r",
											"    pm.expect(jsonData.elevator).to.be.eql(pm.environment.get('baseline_elevator'));\r",
											"    pm.expect(jsonData.balcony).to.be.eql(pm.environment.get('baseline_balcony'));\r",
											"    pm.expect(jsonData.plot).to.be.eql(pm.environment.get('baseline_plot'));\r",
											"    pm.expect(jsonData.description).to.be.eql(pm.environment.get('baseline_description'));\r",
											"    pm.expect(jsonData.active).to.be.true;\r",
											"    pm.expect(jsonData.buildingMaterialType).to.be.eql(pm.environment.get('baseline_building_material_type'));\r",
											"    pm.expect(jsonData.advertiseType).to.be.eql(pm.environment.get('baseline_advertise_type'));\r",
											"    pm.expect(jsonData.buildingCondition).to.be.eql(pm.environment.get('baseline_building_condition'));\r",
											"    pm.expect(jsonData.propertyType).to.be.eql(pm.environment.get('baseline_property_type'));\r",
											"    pm.expect(jsonData.heating).to.be.eql(pm.environment.get('baseline_heating'));\r",
											"    pm.expect(jsonData.photos).to.have.lengthOf(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": 10,\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 6 - Int Over Intmax",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.test('Response contains all required fields', function (){\r",
											"    pm.expect(jsonData.id).to.exist();\r",
											"    pm.environment.set('adid', jsonData.id);\r",
											"    pm.expect(jsonData.address).to.be.eql(pm.environment.get(\"baseline_address\"));\r",
											"    pm.expect(jsonData.price).to.be.eql(2147483650);\r",
											"    pm.expect(jsonData.floorArea).to.be.eql(pm.environment.get('baseline_floor_area'));\r",
											"    pm.expect(jsonData.rooms).to.be.eql(pm.environment.get('baseline_rooms'));\r",
											"    pm.expect(jsonData.builtYear).to.be.eql(pm.environment.get('baseline_built_year'));\r",
											"    pm.expect(jsonData.floor).to.be.eql(pm.environment.get('baseline_floor'));\r",
											"    pm.expect(jsonData.elevator).to.be.eql(pm.environment.get('baseline_elevator'));\r",
											"    pm.expect(jsonData.balcony).to.be.eql(pm.environment.get('baseline_balcony'));\r",
											"    pm.expect(jsonData.plot).to.be.eql(pm.environment.get('baseline_plot'));\r",
											"    pm.expect(jsonData.description).to.be.eql(pm.environment.get('baseline_description'));\r",
											"    pm.expect(jsonData.active).to.be.true;\r",
											"    pm.expect(jsonData.buildingMaterialType).to.be.eql(pm.environment.get('baseline_building_material_type'));\r",
											"    pm.expect(jsonData.advertiseType).to.be.eql(pm.environment.get('baseline_advertise_type'));\r",
											"    pm.expect(jsonData.buildingCondition).to.be.eql(pm.environment.get('baseline_building_condition'));\r",
											"    pm.expect(jsonData.propertyType).to.be.eql(pm.environment.get('baseline_property_type'));\r",
											"    pm.expect(jsonData.heating).to.be.eql(pm.environment.get('baseline_heating'));\r",
											"    pm.expect(jsonData.photos).to.have.lengthOf(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": 2147483650,\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 7 - String over 256 Characters in Description",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.test('Response contains all required fields', function (){\r",
											"    pm.expect(jsonData.id).to.exist();\r",
											"    pm.environment.set('adid', jsonData.id);\r",
											"    pm.expect(jsonData.address).to.be.eql(pm.environment.get(\"baseline_address\"));\r",
											"    pm.expect(jsonData.price).to.be.eql(pm.environment.get('baseline_price'));\r",
											"    pm.expect(jsonData.floorArea).to.be.eql(pm.environment.get('baseline_floor_area'));\r",
											"    pm.expect(jsonData.rooms).to.be.eql(pm.environment.get('baseline_rooms'));\r",
											"    pm.expect(jsonData.builtYear).to.be.eql(pm.environment.get('baseline_built_year'));\r",
											"    pm.expect(jsonData.floor).to.be.eql(pm.environment.get('baseline_floor'));\r",
											"    pm.expect(jsonData.elevator).to.be.eql(pm.environment.get('baseline_elevator'));\r",
											"    pm.expect(jsonData.balcony).to.be.eql(pm.environment.get('baseline_balcony'));\r",
											"    pm.expect(jsonData.plot).to.be.eql(pm.environment.get('baseline_plot'));\r",
											"    pm.expect(jsonData.description).to.be.eql(pm.environment.get('description_over_256'));\r",
											"    pm.expect(jsonData.active).to.be.true;\r",
											"    pm.expect(jsonData.buildingMaterialType).to.be.eql(pm.environment.get('baseline_building_material_type'));\r",
											"    pm.expect(jsonData.advertiseType).to.be.eql(pm.environment.get('baseline_advertise_type'));\r",
											"    pm.expect(jsonData.buildingCondition).to.be.eql(pm.environment.get('baseline_building_condition'));\r",
											"    pm.expect(jsonData.propertyType).to.be.eql(pm.environment.get('baseline_property_type'));\r",
											"    pm.expect(jsonData.heating).to.be.eql(pm.environment.get('baseline_heating'));\r",
											"    pm.expect(jsonData.photos).to.have.lengthOf(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{description_over_256}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 8 - String over 256 Characters in a Non-description Field",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"address\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Cannot be over 256 characters\");\r",
											"});\r",
											"\r",
											"//TODO correct error message"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{description_over_256}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 9 - Wrong Input Data in Enum Types (API)",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"heating\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Unsupported heating type\");\r",
											"});\r",
											"\r",
											"//TODO correct error message"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"DRAGON_BREATH\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 10 - Wrong Input Type for Boolean (API)",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"elevator\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Invalid input type for elevator\");\r",
											"});\r",
											"\r",
											"//TODO correct error message"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": \"igaz-e\",\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 11 - Negative Number as Input",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"price\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Price cannot be negative\");\r",
											"});\r",
											"\r",
											"//TODO correct error message"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": -220000,\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 12 - Zero as Input in Fields That Expect a Positive Number",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"plot\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Plot cannot be 0 or negative\");\r",
											"});\r",
											"\r",
											"//TODO correct error message"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": 0,\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 13 - Posting in Another User's Name (API)",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=CRITICAL\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"fake_userid\", pm.environment.get('baseline_id')-1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{fake_userid}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 14 - Posting Logged Out",
					"item": [
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=CRITICAL\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"fake_userid\", pm.environment.get('baseline_id')-1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 15 - Existing Address",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 201)\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set('adid', jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "New Ad, Same Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=post\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"address\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Address already in database\");\r",
											"});\r",
											"\r",
											"//TODO correct error message"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Test Cycle 7 - Editing Ads",
			"item": [
				{
					"name": "Test Case 1 - Editing an Ad",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 201)\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set('adid', jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "Edit Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=edit\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.test('Response contains all required fields', function (){\r",
											"    pm.expect(jsonData.address).to.be.eql(pm.environment.get(\"baseline_address_2\"));\r",
											"    pm.expect(jsonData.price).to.be.eql(pm.environment.get('baseline_price'));\r",
											"    pm.expect(jsonData.floorArea).to.be.eql(pm.environment.get('baseline_floor_area'));\r",
											"    pm.expect(jsonData.rooms).to.be.eql(pm.environment.get('baseline_rooms'));\r",
											"    pm.expect(jsonData.builtYear).to.be.eql(pm.environment.get('baseline_built_year'));\r",
											"    pm.expect(jsonData.floor).to.be.eql(pm.environment.get('baseline_floor'));\r",
											"    pm.expect(jsonData.elevator).to.be.eql(pm.environment.get('baseline_elevator'));\r",
											"    pm.expect(jsonData.balcony).to.be.eql(pm.environment.get('baseline_balcony'));\r",
											"    pm.expect(jsonData.plot).to.be.eql(pm.environment.get('baseline_plot'));\r",
											"    pm.expect(jsonData.description).to.be.eql(pm.environment.get('baseline_description'));\r",
											"    pm.expect(jsonData.active).to.be.true;\r",
											"    pm.expect(jsonData.buildingMaterialType).to.be.eql(pm.environment.get('baseline_building_material_type'));\r",
											"    pm.expect(jsonData.advertiseType).to.be.eql(pm.environment.get('baseline_advertise_type'));\r",
											"    pm.expect(jsonData.buildingCondition).to.be.eql(pm.environment.get('baseline_building_condition'));\r",
											"    pm.expect(jsonData.propertyType).to.be.eql(pm.environment.get('baseline_property_type'));\r",
											"    pm.expect(jsonData.heating).to.be.eql(pm.environment.get('baseline_heating'));\r",
											"    pm.expect(jsonData.photos).to.have.lengthOf(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address_2}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Edits the ad with the given ad id.\n\nIs actually a PUT request, so all the ad data is required in it."
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 2 - Missing Required Data (API)",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 201)\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set('adid', jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "Edit Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=edit\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"address\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Cannot have missing address\");\r",
											"});\r",
											"\r",
											"//TODO correct error message"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Edits the ad with the given ad id.\n\nIs actually a PUT request, so all the ad data is required in it."
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 3 - Excess Data (API)",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 201)\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set('adid', jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "Edit Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=edit\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Low\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"whatever\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Excess data in request\");\r",
											"});\r",
											"\r",
											"//TODO correct error message"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": {{baseline_address_2}},\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"whatever\": \"whatever indeed\",\r\n    \"someExtraData\": 14\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Edits the ad with the given ad id.\n\nIs actually a PUT request, so all the ad data is required in it."
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 4 - Empty Required Data",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 201)\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set('adid', jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "Edit Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=edit\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"address\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Cannot have empty address\");\r",
											"});\r",
											"\r",
											"//TODO correct error message"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Edits the ad with the given ad id.\n\nIs actually a PUT request, so all the ad data is required in it."
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 5 - Invalid Input Data Type",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 201)\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set('adid', jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "Edit Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=edit\r",
											"// @allure.label.tag=negative\r",
											"// @allure.label.severity=Normal\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Received correct error message\", function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);    \r",
											"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"errorMessage\");\r",
											"    pm.expect(typeof jsonData[0].field).to.eql(\"string\");\r",
											"    pm.expect(typeof jsonData[0].errorMessage).to.eql(\"string\");\r",
											"    pm.expect(jsonData[0].field).to.eql(\"rooms\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql(\"Rooms must be number\");\r",
											"});\r",
											"\r",
											"//TODO correct error message"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": {{baseline_address_2}},\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": \"ketto darab osszesen\",\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Edits the ad with the given ad id.\n\nIs actually a PUT request, so all the ad data is required in it."
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				},
				{
					"name": "Test Case 6 - Int Instead of Float",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"access_token\", jsonData.accessToken);\r",
											"pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
											"\r",
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.environment.set(\"assertion_chain\", pm.response.code == 200);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{baseline_username}}\",\r\n    \"password\" : \"{{baseline_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Previous test(s) passed\", function () {\r",
											"    pm.expect(pm.environment.get('assertion_chain')).to.be.true;\r",
											"    pm.environment.set('assertion_chain', pm.environment.get('assertion_chain') && pm.response.code == 201)\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set('adid', jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{baseline_address}}\",\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": {{baseline_plot}},\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\",\r\n    \"photos\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										}
									]
								},
								"description": "Posts a new ad in the name of the given user id."
							},
							"response": []
						},
						{
							"name": "Edit Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=API\r",
											"// @allure.label.tag=ads\r",
											"// @allure.label.tag=edit\r",
											"// @allure.label.tag=positive\r",
											"// @allure.label.severity=CRITICAL\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.test('Response contains all required fields', function (){\r",
											"    pm.expect(jsonData.address).to.be.eql(pm.environment.get(\"baseline_address_2\"));\r",
											"    pm.expect(jsonData.price).to.be.eql(pm.environment.get('baseline_price'));\r",
											"    pm.expect(jsonData.floorArea).to.be.eql(pm.environment.get('baseline_floor_area'));\r",
											"    pm.expect(jsonData.rooms).to.be.eql(pm.environment.get('baseline_rooms'));\r",
											"    pm.expect(jsonData.builtYear).to.be.eql(pm.environment.get('baseline_built_year'));\r",
											"    pm.expect(jsonData.floor).to.be.eql(pm.environment.get('baseline_floor'));\r",
											"    pm.expect(jsonData.elevator).to.be.eql(pm.environment.get('baseline_elevator'));\r",
											"    pm.expect(jsonData.balcony).to.be.eql(pm.environment.get('baseline_balcony'));\r",
											"    pm.expect(typeof jsonData.plot).to.be.eql('number');\r",
											"    pm.expect(jsonData.plot).to.be.eql(30.0);\r",
											"    pm.expect(jsonData.description).to.be.eql(pm.environment.get('baseline_description'));\r",
											"    pm.expect(jsonData.active).to.be.true;\r",
											"    pm.expect(jsonData.buildingMaterialType).to.be.eql(pm.environment.get('baseline_building_material_type'));\r",
											"    pm.expect(jsonData.advertiseType).to.be.eql(pm.environment.get('baseline_advertise_type'));\r",
											"    pm.expect(jsonData.buildingCondition).to.be.eql(pm.environment.get('baseline_building_condition'));\r",
											"    pm.expect(jsonData.propertyType).to.be.eql(pm.environment.get('baseline_property_type'));\r",
											"    pm.expect(jsonData.heating).to.be.eql(pm.environment.get('baseline_heating'));\r",
											"    pm.expect(jsonData.photos).to.have.lengthOf(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": {{baseline_address_2}},\r\n    \"price\": {{baseline_price}},\r\n    \"floorArea\": {{baseline_floor_area}},\r\n    \"rooms\": {{baseline_rooms}},\r\n    \"builtYear\": {{baseline_built_year}},\r\n    \"floor\": {{baseline_floor}},\r\n    \"elevator\": {{baseline_elevator}},\r\n    \"balcony\": {{baseline_balcony}},\r\n    \"plot\": 30,\r\n    \"description\": \"{{baseline_description}}\",\r\n    \"active\": true,\r\n    \"buildingMaterialType\": \"{{baseline_building_material_type}}\",\r\n    \"advertiseType\": \"{{baseline_advertise_type}}\",\r\n    \"buildingCondition\": \"{{baseline_building_condition}}\",\r\n    \"propertyType\": \"{{baseline_property_type}}\",\r\n    \"heating\": \"{{baseline_heating}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Edits the ad with the given ad id.\n\nIs actually a PUT request, so all the ad data is required in it."
							},
							"response": []
						},
						{
							"name": "New Ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// @allure.label.tag=setup\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ads/:userId/ads/:adId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ads",
										":userId",
										"ads",
										":adId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{baseline_id}}",
											"description": "Id of the posting user"
										},
										{
											"key": "adId",
											"value": "{{adid}}",
											"description": "Id of the ad"
										}
									]
								},
								"description": "Deletes the ad with the given ad id."
							},
							"response": []
						}
					]
				}
			]
		}
	]
}